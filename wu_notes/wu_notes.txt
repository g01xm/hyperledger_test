1. add policy in configtx.yaml
2. add capability in configtx.yaml
3. enable TLS ORDERER_GENERAL_TLS_ENABLED=true in docker-compose-base.yml
4. add image_tag 2.1.0 in docker-compose-base.yml

netstat -nao
192.168.1.9

===
export FABRIC_CFG_PATH=$PWD
export PATH=${PWD}/../bin:$PATH

1. crypto artifacts
../bin/cryptogen generate --config=./crypto-config.yaml

2. created the genesis block
../bin/configtxgen -profile TwoOrgsOrdererGenesis -channelID system-channel -outputBlock ./channel-artifacts/genesis.block

3. create a channel creation transaction
../bin/configtxgen -profile ChannelAll -outputCreateChannelTx ./channel-artifacts/channelall.tx -channelID channelall

4. bring up the node
docker-compose -f docker-compose-orderer.yml up -d
docker-compose -f docker-compose-node1.yml up -d

docker-compose -f docker-compose-orderer.yml down
docker-compose -f docker-compose-node1.yml down
docker rm $(docker ps -aq)
docker rmi $(docker images net-* -q)

5. create the genesis block for channel channelall.

login to peer0.org1.example.com
docker exec -it peer0.org1.example.com bash
docker exec -it peer0.org1.example.com sh
docker exec -it cli bash
docker network inspect deployment_fabric

copy ordererOrganizations C:\Wu\Wu_2020\Hyperledger\fabric-samples\wuhuang_network\crypto-config\
into C:\Users\i826826.CTUN50840482A\go\src\github.com\hyperledger\fabric\peer\crypto

export CORE_PEER_MSPCONFIGPATH=/var/hyperledger/users/Admin@org1.example.com/msp

export ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

docker exec -e "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c channelall -f /var/hyperledger/configs/channelall.tx --tls --cafile $ORDERER_CA


docker exec -e "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel create -o orderer.example.com:7050 -c channelall -f /var/hyperledger/configs/channelall.tx --tls --cafile /opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem

6:  peer0.org1.example.com join channelall first using this channelall.block file
docker exec -e "CORE_PEER_MSPCONFIGPATH=/var/hyperledger/users/Admin@org1.example.com/msp" peer0.org1.example.com peer channel join -b channelall.block

docker cp peer0.org1.example.com:channelall.block .

7: Install and define a chaincode

login to cli container: docker -exec -it cli bash
connect to VPN
check mount in cli
/OPT/GOPATH/SRC/GITHUB.COM/CHAINCODE -> /host_mnt/c/Wu/Wu_2020/Hyperledger/fabric-samples/chaincode

cd /opt/gopath/src/github.com/chaincode/abstore/go
GO111MODULE=on go mod vendor
cd -

under pwd /opt/gopath/src/github.com
ls -> chaincode    hyperledger
peer lifecycle chaincode package mycc.tar.gz --path chaincode/abstore/go/ --lang golang --label mycc_1

8: copy package file from cli to local and upload to peer0.org1
docker cp  cli:/opt/gopath/src/github.com/mycc.tar.gz  .
docker cp  mycc.tar.gz  peer0.org1.example.com:/mycc.tar.gz
docker exec -it peer0.org1.example.com sh
ls

set this CORE_PEER_MSPCONFIGPATH first, otherwise get chaincode install failed with status: 500 - Failed to authorize invocation due to failed ACL check: Failed verifying that proposal's creator satisfies local MSP principal during channelless check policy with policy [Admins]: [This identity is not an admin] error

export CORE_PEER_MSPCONFIGPATH=/var/hyperledger/users/Admin@org1.example.com/msp
peer lifecycle chaincode install mycc.tar.gz
peer lifecycle chaincode queryinstalled